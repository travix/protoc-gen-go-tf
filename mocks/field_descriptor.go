package mocks

import (
	mock "github.com/stretchr/testify/mock"
	protowire "google.golang.org/protobuf/encoding/protowire"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
)

// MockedFieldDescriptor is an autogenerated mock type for the FieldDescriptor type.
type MockedFieldDescriptor struct {
	protoreflect.FieldDescriptor
	mock.Mock
}

type MockedFieldDescriptor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockedFieldDescriptor) EXPECT() *MockedFieldDescriptor_Expecter {
	return &MockedFieldDescriptor_Expecter{mock: &_m.Mock}
}

// Cardinality provides a mock function with given fields:.
func (_m *MockedFieldDescriptor) Cardinality() protoreflect.Cardinality {
	ret := _m.Called()

	var r0 protoreflect.Cardinality
	if rf, ok := ret.Get(0).(func() protoreflect.Cardinality); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(protoreflect.Cardinality)
	}

	return r0
}

// MockedFieldDescriptor_Cardinality_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cardinality'.
type MockedFieldDescriptor_Cardinality_Call struct {
	*mock.Call
}

// Cardinality is a helper method to define mock.On call.
func (_e *MockedFieldDescriptor_Expecter) Cardinality() *MockedFieldDescriptor_Cardinality_Call {
	return &MockedFieldDescriptor_Cardinality_Call{Call: _e.mock.On("Cardinality")}
}

func (_c *MockedFieldDescriptor_Cardinality_Call) Run(run func()) *MockedFieldDescriptor_Cardinality_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockedFieldDescriptor_Cardinality_Call) Return(_a0 protoreflect.Cardinality) *MockedFieldDescriptor_Cardinality_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockedFieldDescriptor_Cardinality_Call) RunAndReturn(run func() protoreflect.Cardinality) *MockedFieldDescriptor_Cardinality_Call {
	_c.Call.Return(run)
	return _c
}

// ContainingMessage provides a mock function with given fields:.
func (_m *MockedFieldDescriptor) ContainingMessage() protoreflect.MessageDescriptor {
	ret := _m.Called()

	var r0 protoreflect.MessageDescriptor
	if rf, ok := ret.Get(0).(func() protoreflect.MessageDescriptor); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(protoreflect.MessageDescriptor)
		}
	}

	return r0
}

// MockedFieldDescriptor_ContainingMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainingMessage'.
type MockedFieldDescriptor_ContainingMessage_Call struct {
	*mock.Call
}

// ContainingMessage is a helper method to define mock.On call.
func (_e *MockedFieldDescriptor_Expecter) ContainingMessage() *MockedFieldDescriptor_ContainingMessage_Call {
	return &MockedFieldDescriptor_ContainingMessage_Call{Call: _e.mock.On("ContainingMessage")}
}

func (_c *MockedFieldDescriptor_ContainingMessage_Call) Run(run func()) *MockedFieldDescriptor_ContainingMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockedFieldDescriptor_ContainingMessage_Call) Return(_a0 protoreflect.MessageDescriptor) *MockedFieldDescriptor_ContainingMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockedFieldDescriptor_ContainingMessage_Call) RunAndReturn(run func() protoreflect.MessageDescriptor) *MockedFieldDescriptor_ContainingMessage_Call {
	_c.Call.Return(run)
	return _c
}

// ContainingOneof provides a mock function with given fields:.
func (_m *MockedFieldDescriptor) ContainingOneof() protoreflect.OneofDescriptor {
	ret := _m.Called()

	var r0 protoreflect.OneofDescriptor
	if rf, ok := ret.Get(0).(func() protoreflect.OneofDescriptor); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(protoreflect.OneofDescriptor)
		}
	}

	return r0
}

// MockedFieldDescriptor_ContainingOneof_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainingOneof'.
type MockedFieldDescriptor_ContainingOneof_Call struct {
	*mock.Call
}

// ContainingOneof is a helper method to define mock.On call.
func (_e *MockedFieldDescriptor_Expecter) ContainingOneof() *MockedFieldDescriptor_ContainingOneof_Call {
	return &MockedFieldDescriptor_ContainingOneof_Call{Call: _e.mock.On("ContainingOneof")}
}

func (_c *MockedFieldDescriptor_ContainingOneof_Call) Run(run func()) *MockedFieldDescriptor_ContainingOneof_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockedFieldDescriptor_ContainingOneof_Call) Return(_a0 protoreflect.OneofDescriptor) *MockedFieldDescriptor_ContainingOneof_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockedFieldDescriptor_ContainingOneof_Call) RunAndReturn(run func() protoreflect.OneofDescriptor) *MockedFieldDescriptor_ContainingOneof_Call {
	_c.Call.Return(run)
	return _c
}

// Default provides a mock function with given fields:.
func (_m *MockedFieldDescriptor) Default() protoreflect.Value {
	ret := _m.Called()

	var r0 protoreflect.Value
	if rf, ok := ret.Get(0).(func() protoreflect.Value); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(protoreflect.Value)
	}

	return r0
}

// MockedFieldDescriptor_Default_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Default'.
type MockedFieldDescriptor_Default_Call struct {
	*mock.Call
}

// Default is a helper method to define mock.On call.
func (_e *MockedFieldDescriptor_Expecter) Default() *MockedFieldDescriptor_Default_Call {
	return &MockedFieldDescriptor_Default_Call{Call: _e.mock.On("Default")}
}

func (_c *MockedFieldDescriptor_Default_Call) Run(run func()) *MockedFieldDescriptor_Default_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockedFieldDescriptor_Default_Call) Return(_a0 protoreflect.Value) *MockedFieldDescriptor_Default_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockedFieldDescriptor_Default_Call) RunAndReturn(run func() protoreflect.Value) *MockedFieldDescriptor_Default_Call {
	_c.Call.Return(run)
	return _c
}

// DefaultEnumValue provides a mock function with given fields:.
func (_m *MockedFieldDescriptor) DefaultEnumValue() protoreflect.EnumValueDescriptor {
	ret := _m.Called()

	var r0 protoreflect.EnumValueDescriptor
	if rf, ok := ret.Get(0).(func() protoreflect.EnumValueDescriptor); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(protoreflect.EnumValueDescriptor)
		}
	}

	return r0
}

// MockedFieldDescriptor_DefaultEnumValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DefaultEnumValue'.
type MockedFieldDescriptor_DefaultEnumValue_Call struct {
	*mock.Call
}

// DefaultEnumValue is a helper method to define mock.On call.
func (_e *MockedFieldDescriptor_Expecter) DefaultEnumValue() *MockedFieldDescriptor_DefaultEnumValue_Call {
	return &MockedFieldDescriptor_DefaultEnumValue_Call{Call: _e.mock.On("DefaultEnumValue")}
}

func (_c *MockedFieldDescriptor_DefaultEnumValue_Call) Run(run func()) *MockedFieldDescriptor_DefaultEnumValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockedFieldDescriptor_DefaultEnumValue_Call) Return(_a0 protoreflect.EnumValueDescriptor) *MockedFieldDescriptor_DefaultEnumValue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockedFieldDescriptor_DefaultEnumValue_Call) RunAndReturn(run func() protoreflect.EnumValueDescriptor) *MockedFieldDescriptor_DefaultEnumValue_Call {
	_c.Call.Return(run)
	return _c
}

// Enum provides a mock function with given fields:.
func (_m *MockedFieldDescriptor) Enum() protoreflect.EnumDescriptor {
	ret := _m.Called()

	var r0 protoreflect.EnumDescriptor
	if rf, ok := ret.Get(0).(func() protoreflect.EnumDescriptor); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(protoreflect.EnumDescriptor)
		}
	}

	return r0
}

// MockedFieldDescriptor_Enum_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Enum'.
type MockedFieldDescriptor_Enum_Call struct {
	*mock.Call
}

// Enum is a helper method to define mock.On call.
func (_e *MockedFieldDescriptor_Expecter) Enum() *MockedFieldDescriptor_Enum_Call {
	return &MockedFieldDescriptor_Enum_Call{Call: _e.mock.On("Enum")}
}

func (_c *MockedFieldDescriptor_Enum_Call) Run(run func()) *MockedFieldDescriptor_Enum_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockedFieldDescriptor_Enum_Call) Return(_a0 protoreflect.EnumDescriptor) *MockedFieldDescriptor_Enum_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockedFieldDescriptor_Enum_Call) RunAndReturn(run func() protoreflect.EnumDescriptor) *MockedFieldDescriptor_Enum_Call {
	_c.Call.Return(run)
	return _c
}

// FullName provides a mock function with given fields:.
func (_m *MockedFieldDescriptor) FullName() protoreflect.FullName {
	ret := _m.Called()

	var r0 protoreflect.FullName
	if rf, ok := ret.Get(0).(func() protoreflect.FullName); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(protoreflect.FullName)
	}

	return r0
}

// MockedFieldDescriptor_FullName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FullName'.
type MockedFieldDescriptor_FullName_Call struct {
	*mock.Call
}

// FullName is a helper method to define mock.On call.
func (_e *MockedFieldDescriptor_Expecter) FullName() *MockedFieldDescriptor_FullName_Call {
	return &MockedFieldDescriptor_FullName_Call{Call: _e.mock.On("FullName")}
}

func (_c *MockedFieldDescriptor_FullName_Call) Run(run func()) *MockedFieldDescriptor_FullName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockedFieldDescriptor_FullName_Call) Return(_a0 protoreflect.FullName) *MockedFieldDescriptor_FullName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockedFieldDescriptor_FullName_Call) RunAndReturn(run func() protoreflect.FullName) *MockedFieldDescriptor_FullName_Call {
	_c.Call.Return(run)
	return _c
}

// HasDefault provides a mock function with given fields:.
func (_m *MockedFieldDescriptor) HasDefault() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockedFieldDescriptor_HasDefault_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasDefault'.
type MockedFieldDescriptor_HasDefault_Call struct {
	*mock.Call
}

// HasDefault is a helper method to define mock.On call.
func (_e *MockedFieldDescriptor_Expecter) HasDefault() *MockedFieldDescriptor_HasDefault_Call {
	return &MockedFieldDescriptor_HasDefault_Call{Call: _e.mock.On("HasDefault")}
}

func (_c *MockedFieldDescriptor_HasDefault_Call) Run(run func()) *MockedFieldDescriptor_HasDefault_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockedFieldDescriptor_HasDefault_Call) Return(_a0 bool) *MockedFieldDescriptor_HasDefault_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockedFieldDescriptor_HasDefault_Call) RunAndReturn(run func() bool) *MockedFieldDescriptor_HasDefault_Call {
	_c.Call.Return(run)
	return _c
}

// HasJSONName provides a mock function with given fields:.
func (_m *MockedFieldDescriptor) HasJSONName() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockedFieldDescriptor_HasJSONName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasJSONName'.
type MockedFieldDescriptor_HasJSONName_Call struct {
	*mock.Call
}

// HasJSONName is a helper method to define mock.On call.
func (_e *MockedFieldDescriptor_Expecter) HasJSONName() *MockedFieldDescriptor_HasJSONName_Call {
	return &MockedFieldDescriptor_HasJSONName_Call{Call: _e.mock.On("HasJSONName")}
}

func (_c *MockedFieldDescriptor_HasJSONName_Call) Run(run func()) *MockedFieldDescriptor_HasJSONName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockedFieldDescriptor_HasJSONName_Call) Return(_a0 bool) *MockedFieldDescriptor_HasJSONName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockedFieldDescriptor_HasJSONName_Call) RunAndReturn(run func() bool) *MockedFieldDescriptor_HasJSONName_Call {
	_c.Call.Return(run)
	return _c
}

// HasOptionalKeyword provides a mock function with given fields:.
func (_m *MockedFieldDescriptor) HasOptionalKeyword() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockedFieldDescriptor_HasOptionalKeyword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasOptionalKeyword'.
type MockedFieldDescriptor_HasOptionalKeyword_Call struct {
	*mock.Call
}

// HasOptionalKeyword is a helper method to define mock.On call.
func (_e *MockedFieldDescriptor_Expecter) HasOptionalKeyword() *MockedFieldDescriptor_HasOptionalKeyword_Call {
	return &MockedFieldDescriptor_HasOptionalKeyword_Call{Call: _e.mock.On("HasOptionalKeyword")}
}

func (_c *MockedFieldDescriptor_HasOptionalKeyword_Call) Run(run func()) *MockedFieldDescriptor_HasOptionalKeyword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockedFieldDescriptor_HasOptionalKeyword_Call) Return(_a0 bool) *MockedFieldDescriptor_HasOptionalKeyword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockedFieldDescriptor_HasOptionalKeyword_Call) RunAndReturn(run func() bool) *MockedFieldDescriptor_HasOptionalKeyword_Call {
	_c.Call.Return(run)
	return _c
}

// HasPresence provides a mock function with given fields:.
func (_m *MockedFieldDescriptor) HasPresence() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockedFieldDescriptor_HasPresence_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasPresence'.
type MockedFieldDescriptor_HasPresence_Call struct {
	*mock.Call
}

// HasPresence is a helper method to define mock.On call.
func (_e *MockedFieldDescriptor_Expecter) HasPresence() *MockedFieldDescriptor_HasPresence_Call {
	return &MockedFieldDescriptor_HasPresence_Call{Call: _e.mock.On("HasPresence")}
}

func (_c *MockedFieldDescriptor_HasPresence_Call) Run(run func()) *MockedFieldDescriptor_HasPresence_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockedFieldDescriptor_HasPresence_Call) Return(_a0 bool) *MockedFieldDescriptor_HasPresence_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockedFieldDescriptor_HasPresence_Call) RunAndReturn(run func() bool) *MockedFieldDescriptor_HasPresence_Call {
	_c.Call.Return(run)
	return _c
}

// Index provides a mock function with given fields:.
func (_m *MockedFieldDescriptor) Index() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockedFieldDescriptor_Index_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Index'.
type MockedFieldDescriptor_Index_Call struct {
	*mock.Call
}

// Index is a helper method to define mock.On call.
func (_e *MockedFieldDescriptor_Expecter) Index() *MockedFieldDescriptor_Index_Call {
	return &MockedFieldDescriptor_Index_Call{Call: _e.mock.On("Index")}
}

func (_c *MockedFieldDescriptor_Index_Call) Run(run func()) *MockedFieldDescriptor_Index_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockedFieldDescriptor_Index_Call) Return(_a0 int) *MockedFieldDescriptor_Index_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockedFieldDescriptor_Index_Call) RunAndReturn(run func() int) *MockedFieldDescriptor_Index_Call {
	_c.Call.Return(run)
	return _c
}

// IsExtension provides a mock function with given fields:.
func (_m *MockedFieldDescriptor) IsExtension() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockedFieldDescriptor_IsExtension_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsExtension'.
type MockedFieldDescriptor_IsExtension_Call struct {
	*mock.Call
}

// IsExtension is a helper method to define mock.On call.
func (_e *MockedFieldDescriptor_Expecter) IsExtension() *MockedFieldDescriptor_IsExtension_Call {
	return &MockedFieldDescriptor_IsExtension_Call{Call: _e.mock.On("IsExtension")}
}

func (_c *MockedFieldDescriptor_IsExtension_Call) Run(run func()) *MockedFieldDescriptor_IsExtension_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockedFieldDescriptor_IsExtension_Call) Return(_a0 bool) *MockedFieldDescriptor_IsExtension_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockedFieldDescriptor_IsExtension_Call) RunAndReturn(run func() bool) *MockedFieldDescriptor_IsExtension_Call {
	_c.Call.Return(run)
	return _c
}

// IsList provides a mock function with given fields:.
func (_m *MockedFieldDescriptor) IsList() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockedFieldDescriptor_IsList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsList'.
type MockedFieldDescriptor_IsList_Call struct {
	*mock.Call
}

// IsList is a helper method to define mock.On call.
func (_e *MockedFieldDescriptor_Expecter) IsList() *MockedFieldDescriptor_IsList_Call {
	return &MockedFieldDescriptor_IsList_Call{Call: _e.mock.On("IsList")}
}

func (_c *MockedFieldDescriptor_IsList_Call) Run(run func()) *MockedFieldDescriptor_IsList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockedFieldDescriptor_IsList_Call) Return(_a0 bool) *MockedFieldDescriptor_IsList_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockedFieldDescriptor_IsList_Call) RunAndReturn(run func() bool) *MockedFieldDescriptor_IsList_Call {
	_c.Call.Return(run)
	return _c
}

// IsMap provides a mock function with given fields:.
func (_m *MockedFieldDescriptor) IsMap() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockedFieldDescriptor_IsMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsMap'.
type MockedFieldDescriptor_IsMap_Call struct {
	*mock.Call
}

// IsMap is a helper method to define mock.On call.
func (_e *MockedFieldDescriptor_Expecter) IsMap() *MockedFieldDescriptor_IsMap_Call {
	return &MockedFieldDescriptor_IsMap_Call{Call: _e.mock.On("IsMap")}
}

func (_c *MockedFieldDescriptor_IsMap_Call) Run(run func()) *MockedFieldDescriptor_IsMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockedFieldDescriptor_IsMap_Call) Return(_a0 bool) *MockedFieldDescriptor_IsMap_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockedFieldDescriptor_IsMap_Call) RunAndReturn(run func() bool) *MockedFieldDescriptor_IsMap_Call {
	_c.Call.Return(run)
	return _c
}

// IsPacked provides a mock function with given fields:.
func (_m *MockedFieldDescriptor) IsPacked() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockedFieldDescriptor_IsPacked_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsPacked'.
type MockedFieldDescriptor_IsPacked_Call struct {
	*mock.Call
}

// IsPacked is a helper method to define mock.On call.
func (_e *MockedFieldDescriptor_Expecter) IsPacked() *MockedFieldDescriptor_IsPacked_Call {
	return &MockedFieldDescriptor_IsPacked_Call{Call: _e.mock.On("IsPacked")}
}

func (_c *MockedFieldDescriptor_IsPacked_Call) Run(run func()) *MockedFieldDescriptor_IsPacked_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockedFieldDescriptor_IsPacked_Call) Return(_a0 bool) *MockedFieldDescriptor_IsPacked_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockedFieldDescriptor_IsPacked_Call) RunAndReturn(run func() bool) *MockedFieldDescriptor_IsPacked_Call {
	_c.Call.Return(run)
	return _c
}

// IsPlaceholder provides a mock function with given fields:.
func (_m *MockedFieldDescriptor) IsPlaceholder() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockedFieldDescriptor_IsPlaceholder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsPlaceholder'.
type MockedFieldDescriptor_IsPlaceholder_Call struct {
	*mock.Call
}

// IsPlaceholder is a helper method to define mock.On call.
func (_e *MockedFieldDescriptor_Expecter) IsPlaceholder() *MockedFieldDescriptor_IsPlaceholder_Call {
	return &MockedFieldDescriptor_IsPlaceholder_Call{Call: _e.mock.On("IsPlaceholder")}
}

func (_c *MockedFieldDescriptor_IsPlaceholder_Call) Run(run func()) *MockedFieldDescriptor_IsPlaceholder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockedFieldDescriptor_IsPlaceholder_Call) Return(_a0 bool) *MockedFieldDescriptor_IsPlaceholder_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockedFieldDescriptor_IsPlaceholder_Call) RunAndReturn(run func() bool) *MockedFieldDescriptor_IsPlaceholder_Call {
	_c.Call.Return(run)
	return _c
}

// IsWeak provides a mock function with given fields:.
func (_m *MockedFieldDescriptor) IsWeak() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockedFieldDescriptor_IsWeak_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsWeak'.
type MockedFieldDescriptor_IsWeak_Call struct {
	*mock.Call
}

// IsWeak is a helper method to define mock.On call.
func (_e *MockedFieldDescriptor_Expecter) IsWeak() *MockedFieldDescriptor_IsWeak_Call {
	return &MockedFieldDescriptor_IsWeak_Call{Call: _e.mock.On("IsWeak")}
}

func (_c *MockedFieldDescriptor_IsWeak_Call) Run(run func()) *MockedFieldDescriptor_IsWeak_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockedFieldDescriptor_IsWeak_Call) Return(_a0 bool) *MockedFieldDescriptor_IsWeak_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockedFieldDescriptor_IsWeak_Call) RunAndReturn(run func() bool) *MockedFieldDescriptor_IsWeak_Call {
	_c.Call.Return(run)
	return _c
}

// JSONName provides a mock function with given fields:.
func (_m *MockedFieldDescriptor) JSONName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockedFieldDescriptor_JSONName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JSONName'.
type MockedFieldDescriptor_JSONName_Call struct {
	*mock.Call
}

// JSONName is a helper method to define mock.On call.
func (_e *MockedFieldDescriptor_Expecter) JSONName() *MockedFieldDescriptor_JSONName_Call {
	return &MockedFieldDescriptor_JSONName_Call{Call: _e.mock.On("JSONName")}
}

func (_c *MockedFieldDescriptor_JSONName_Call) Run(run func()) *MockedFieldDescriptor_JSONName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockedFieldDescriptor_JSONName_Call) Return(_a0 string) *MockedFieldDescriptor_JSONName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockedFieldDescriptor_JSONName_Call) RunAndReturn(run func() string) *MockedFieldDescriptor_JSONName_Call {
	_c.Call.Return(run)
	return _c
}

// Kind provides a mock function with given fields:.
func (_m *MockedFieldDescriptor) Kind() protoreflect.Kind {
	ret := _m.Called()

	var r0 protoreflect.Kind
	if rf, ok := ret.Get(0).(func() protoreflect.Kind); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(protoreflect.Kind)
	}

	return r0
}

// MockedFieldDescriptor_Kind_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Kind'.
type MockedFieldDescriptor_Kind_Call struct {
	*mock.Call
}

// Kind is a helper method to define mock.On call.
func (_e *MockedFieldDescriptor_Expecter) Kind() *MockedFieldDescriptor_Kind_Call {
	return &MockedFieldDescriptor_Kind_Call{Call: _e.mock.On("Kind")}
}

func (_c *MockedFieldDescriptor_Kind_Call) Run(run func()) *MockedFieldDescriptor_Kind_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockedFieldDescriptor_Kind_Call) Return(_a0 protoreflect.Kind) *MockedFieldDescriptor_Kind_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockedFieldDescriptor_Kind_Call) RunAndReturn(run func() protoreflect.Kind) *MockedFieldDescriptor_Kind_Call {
	_c.Call.Return(run)
	return _c
}

// MapKey provides a mock function with given fields:.
func (_m *MockedFieldDescriptor) MapKey() protoreflect.FieldDescriptor {
	ret := _m.Called()

	var r0 protoreflect.FieldDescriptor
	if rf, ok := ret.Get(0).(func() protoreflect.FieldDescriptor); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(protoreflect.FieldDescriptor)
		}
	}

	return r0
}

// MockedFieldDescriptor_MapKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MapKey'.
type MockedFieldDescriptor_MapKey_Call struct {
	*mock.Call
}

// MapKey is a helper method to define mock.On call.
func (_e *MockedFieldDescriptor_Expecter) MapKey() *MockedFieldDescriptor_MapKey_Call {
	return &MockedFieldDescriptor_MapKey_Call{Call: _e.mock.On("MapKey")}
}

func (_c *MockedFieldDescriptor_MapKey_Call) Run(run func()) *MockedFieldDescriptor_MapKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockedFieldDescriptor_MapKey_Call) Return(_a0 protoreflect.FieldDescriptor) *MockedFieldDescriptor_MapKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockedFieldDescriptor_MapKey_Call) RunAndReturn(run func() protoreflect.FieldDescriptor) *MockedFieldDescriptor_MapKey_Call {
	_c.Call.Return(run)
	return _c
}

// MapValue provides a mock function with given fields:.
func (_m *MockedFieldDescriptor) MapValue() protoreflect.FieldDescriptor {
	ret := _m.Called()

	var r0 protoreflect.FieldDescriptor
	if rf, ok := ret.Get(0).(func() protoreflect.FieldDescriptor); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(protoreflect.FieldDescriptor)
		}
	}

	return r0
}

// MockedFieldDescriptor_MapValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MapValue'.
type MockedFieldDescriptor_MapValue_Call struct {
	*mock.Call
}

// MapValue is a helper method to define mock.On call.
func (_e *MockedFieldDescriptor_Expecter) MapValue() *MockedFieldDescriptor_MapValue_Call {
	return &MockedFieldDescriptor_MapValue_Call{Call: _e.mock.On("MapValue")}
}

func (_c *MockedFieldDescriptor_MapValue_Call) Run(run func()) *MockedFieldDescriptor_MapValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockedFieldDescriptor_MapValue_Call) Return(_a0 protoreflect.FieldDescriptor) *MockedFieldDescriptor_MapValue_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockedFieldDescriptor_MapValue_Call) RunAndReturn(run func() protoreflect.FieldDescriptor) *MockedFieldDescriptor_MapValue_Call {
	_c.Call.Return(run)
	return _c
}

// Message provides a mock function with given fields:.
func (_m *MockedFieldDescriptor) Message() protoreflect.MessageDescriptor {
	ret := _m.Called()

	var r0 protoreflect.MessageDescriptor
	if rf, ok := ret.Get(0).(func() protoreflect.MessageDescriptor); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(protoreflect.MessageDescriptor)
		}
	}

	return r0
}

// MockedFieldDescriptor_Message_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Message'.
type MockedFieldDescriptor_Message_Call struct {
	*mock.Call
}

// Message is a helper method to define mock.On call.
func (_e *MockedFieldDescriptor_Expecter) Message() *MockedFieldDescriptor_Message_Call {
	return &MockedFieldDescriptor_Message_Call{Call: _e.mock.On("Message")}
}

func (_c *MockedFieldDescriptor_Message_Call) Run(run func()) *MockedFieldDescriptor_Message_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockedFieldDescriptor_Message_Call) Return(_a0 protoreflect.MessageDescriptor) *MockedFieldDescriptor_Message_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockedFieldDescriptor_Message_Call) RunAndReturn(run func() protoreflect.MessageDescriptor) *MockedFieldDescriptor_Message_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:.
func (_m *MockedFieldDescriptor) Name() protoreflect.Name {
	ret := _m.Called()

	var r0 protoreflect.Name
	if rf, ok := ret.Get(0).(func() protoreflect.Name); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(protoreflect.Name)
	}

	return r0
}

// MockedFieldDescriptor_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'.
type MockedFieldDescriptor_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call.
func (_e *MockedFieldDescriptor_Expecter) Name() *MockedFieldDescriptor_Name_Call {
	return &MockedFieldDescriptor_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockedFieldDescriptor_Name_Call) Run(run func()) *MockedFieldDescriptor_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockedFieldDescriptor_Name_Call) Return(_a0 protoreflect.Name) *MockedFieldDescriptor_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockedFieldDescriptor_Name_Call) RunAndReturn(run func() protoreflect.Name) *MockedFieldDescriptor_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Number provides a mock function with given fields:.
func (_m *MockedFieldDescriptor) Number() protowire.Number {
	ret := _m.Called()

	var r0 protowire.Number
	if rf, ok := ret.Get(0).(func() protowire.Number); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(protowire.Number)
	}

	return r0
}

// MockedFieldDescriptor_Number_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Number'.
type MockedFieldDescriptor_Number_Call struct {
	*mock.Call
}

// Number is a helper method to define mock.On call.
func (_e *MockedFieldDescriptor_Expecter) Number() *MockedFieldDescriptor_Number_Call {
	return &MockedFieldDescriptor_Number_Call{Call: _e.mock.On("Number")}
}

func (_c *MockedFieldDescriptor_Number_Call) Run(run func()) *MockedFieldDescriptor_Number_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockedFieldDescriptor_Number_Call) Return(_a0 protowire.Number) *MockedFieldDescriptor_Number_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockedFieldDescriptor_Number_Call) RunAndReturn(run func() protowire.Number) *MockedFieldDescriptor_Number_Call {
	_c.Call.Return(run)
	return _c
}

// Options provides a mock function with given fields:.
func (_m *MockedFieldDescriptor) Options() protoreflect.ProtoMessage {
	ret := _m.Called()

	var r0 protoreflect.ProtoMessage
	if rf, ok := ret.Get(0).(func() protoreflect.ProtoMessage); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(protoreflect.ProtoMessage)
		}
	}

	return r0
}

// MockedFieldDescriptor_Options_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Options'.
type MockedFieldDescriptor_Options_Call struct {
	*mock.Call
}

// Options is a helper method to define mock.On call.
func (_e *MockedFieldDescriptor_Expecter) Options() *MockedFieldDescriptor_Options_Call {
	return &MockedFieldDescriptor_Options_Call{Call: _e.mock.On("Options")}
}

func (_c *MockedFieldDescriptor_Options_Call) Run(run func()) *MockedFieldDescriptor_Options_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockedFieldDescriptor_Options_Call) Return(_a0 protoreflect.ProtoMessage) *MockedFieldDescriptor_Options_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockedFieldDescriptor_Options_Call) RunAndReturn(run func() protoreflect.ProtoMessage) *MockedFieldDescriptor_Options_Call {
	_c.Call.Return(run)
	return _c
}

// Parent provides a mock function with given fields:.
func (_m *MockedFieldDescriptor) Parent() protoreflect.Descriptor {
	ret := _m.Called()

	var r0 protoreflect.Descriptor
	if rf, ok := ret.Get(0).(func() protoreflect.Descriptor); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(protoreflect.Descriptor)
		}
	}

	return r0
}

// MockedFieldDescriptor_Parent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Parent'.
type MockedFieldDescriptor_Parent_Call struct {
	*mock.Call
}

// Parent is a helper method to define mock.On call.
func (_e *MockedFieldDescriptor_Expecter) Parent() *MockedFieldDescriptor_Parent_Call {
	return &MockedFieldDescriptor_Parent_Call{Call: _e.mock.On("Parent")}
}

func (_c *MockedFieldDescriptor_Parent_Call) Run(run func()) *MockedFieldDescriptor_Parent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockedFieldDescriptor_Parent_Call) Return(_a0 protoreflect.Descriptor) *MockedFieldDescriptor_Parent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockedFieldDescriptor_Parent_Call) RunAndReturn(run func() protoreflect.Descriptor) *MockedFieldDescriptor_Parent_Call {
	_c.Call.Return(run)
	return _c
}

// ParentFile provides a mock function with given fields:.
func (_m *MockedFieldDescriptor) ParentFile() protoreflect.FileDescriptor {
	ret := _m.Called()

	var r0 protoreflect.FileDescriptor
	if rf, ok := ret.Get(0).(func() protoreflect.FileDescriptor); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(protoreflect.FileDescriptor)
		}
	}

	return r0
}

// MockedFieldDescriptor_ParentFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParentFile'.
type MockedFieldDescriptor_ParentFile_Call struct {
	*mock.Call
}

// ParentFile is a helper method to define mock.On call.
func (_e *MockedFieldDescriptor_Expecter) ParentFile() *MockedFieldDescriptor_ParentFile_Call {
	return &MockedFieldDescriptor_ParentFile_Call{Call: _e.mock.On("ParentFile")}
}

func (_c *MockedFieldDescriptor_ParentFile_Call) Run(run func()) *MockedFieldDescriptor_ParentFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockedFieldDescriptor_ParentFile_Call) Return(_a0 protoreflect.FileDescriptor) *MockedFieldDescriptor_ParentFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockedFieldDescriptor_ParentFile_Call) RunAndReturn(run func() protoreflect.FileDescriptor) *MockedFieldDescriptor_ParentFile_Call {
	_c.Call.Return(run)
	return _c
}

// MockedFieldDescriptor_ProtoInternal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProtoInternal'.
type MockedFieldDescriptor_ProtoInternal_Call struct {
	*mock.Call
}

// ProtoInternal is a helper method to define mock.On call
//   - _a0 pragma.DoNotImplement
func (_e *MockedFieldDescriptor_Expecter) ProtoInternal(_a0 interface{}) *MockedFieldDescriptor_ProtoInternal_Call {
	return &MockedFieldDescriptor_ProtoInternal_Call{Call: _e.mock.On("ProtoInternal", _a0)}
}

func (_c *MockedFieldDescriptor_ProtoInternal_Call) Return() *MockedFieldDescriptor_ProtoInternal_Call {
	_c.Call.Return()
	return _c
}

// ProtoType provides a mock function with given fields: _a0.
func (_m *MockedFieldDescriptor) ProtoType(_a0 protoreflect.FieldDescriptor) {
	_m.Called(_a0)
}

// MockedFieldDescriptor_ProtoType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProtoType'.
type MockedFieldDescriptor_ProtoType_Call struct {
	*mock.Call
}

// ProtoType is a helper method to define mock.On call
//   - _a0 protoreflect.FieldDescriptor
func (_e *MockedFieldDescriptor_Expecter) ProtoType(_a0 interface{}) *MockedFieldDescriptor_ProtoType_Call {
	return &MockedFieldDescriptor_ProtoType_Call{Call: _e.mock.On("ProtoType", _a0)}
}

func (_c *MockedFieldDescriptor_ProtoType_Call) Run(run func(_a0 protoreflect.FieldDescriptor)) *MockedFieldDescriptor_ProtoType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(protoreflect.FieldDescriptor))
	})
	return _c
}

func (_c *MockedFieldDescriptor_ProtoType_Call) Return() *MockedFieldDescriptor_ProtoType_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockedFieldDescriptor_ProtoType_Call) RunAndReturn(run func(protoreflect.FieldDescriptor)) *MockedFieldDescriptor_ProtoType_Call {
	_c.Call.Return(run)
	return _c
}

// Syntax provides a mock function with given fields:.
func (_m *MockedFieldDescriptor) Syntax() protoreflect.Syntax {
	ret := _m.Called()

	var r0 protoreflect.Syntax
	if rf, ok := ret.Get(0).(func() protoreflect.Syntax); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(protoreflect.Syntax)
	}

	return r0
}

// MockedFieldDescriptor_Syntax_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Syntax'.
type MockedFieldDescriptor_Syntax_Call struct {
	*mock.Call
}

// Syntax is a helper method to define mock.On call.
func (_e *MockedFieldDescriptor_Expecter) Syntax() *MockedFieldDescriptor_Syntax_Call {
	return &MockedFieldDescriptor_Syntax_Call{Call: _e.mock.On("Syntax")}
}

func (_c *MockedFieldDescriptor_Syntax_Call) Run(run func()) *MockedFieldDescriptor_Syntax_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockedFieldDescriptor_Syntax_Call) Return(_a0 protoreflect.Syntax) *MockedFieldDescriptor_Syntax_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockedFieldDescriptor_Syntax_Call) RunAndReturn(run func() protoreflect.Syntax) *MockedFieldDescriptor_Syntax_Call {
	_c.Call.Return(run)
	return _c
}

// TextName provides a mock function with given fields:.
func (_m *MockedFieldDescriptor) TextName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockedFieldDescriptor_TextName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TextName'.
type MockedFieldDescriptor_TextName_Call struct {
	*mock.Call
}

// TextName is a helper method to define mock.On call.
func (_e *MockedFieldDescriptor_Expecter) TextName() *MockedFieldDescriptor_TextName_Call {
	return &MockedFieldDescriptor_TextName_Call{Call: _e.mock.On("TextName")}
}

func (_c *MockedFieldDescriptor_TextName_Call) Run(run func()) *MockedFieldDescriptor_TextName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockedFieldDescriptor_TextName_Call) Return(_a0 string) *MockedFieldDescriptor_TextName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockedFieldDescriptor_TextName_Call) RunAndReturn(run func() string) *MockedFieldDescriptor_TextName_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockedFieldDescriptor interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockedFieldDescriptor creates a new instance of MockedFieldDescriptor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockedFieldDescriptor(t mockConstructorTestingTNewMockedFieldDescriptor) *MockedFieldDescriptor {
	mock := &MockedFieldDescriptor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

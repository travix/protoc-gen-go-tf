// Code generated by protoc-gen-terraform. DO NOT EDIT.
// versions:
// 	 protoc-gen-gotf {{ .Version }}
// 	 protoc          {{ .ProtocVersion }}
// source: {{ .Location }}

package {{ .ProviderPackageName }}

import (
{{ if .Imports }}
	{{ .Imports | join "\n\t" }}
{{ end }}
)

// Ensure *{{ .Block.GoName }}Resource fully satisfy terraform framework interfaces.
var _ resource.Resource = &{{ .Block.GoName }}Resource{}

type {{ .Block.GoName }}Resource struct {
	proxy rsrc.Resource
{{- range $name, $type := .Block.Members }}
	{{ $name }} {{ MemberType $type }} // defined in proto file
{{- end }}
}

func New{{ .Block.GoName }}Resource(proxy rsrc.Resource) func() resource.Resource {
	if proxy == nil {
		panic("github.com/travix/gotf/rsrc.Resource is required")
	}
	return func() resource.Resource {
		return &{{ .Block.GoName }}Resource{proxy: proxy}
	}
}

func (r *{{ .Block.GoName }}Resource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_{{ .Block.TfName }}"
	if _proxy, ok := r.proxy.(rsrc.CanMetadata); ok {
		ctx = r.setupContext(ctx)
		_proxy.Metadata(ctx, req, resp)
	}
}

func (r *{{ .Block.GoName }}Resource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: {{ .Block.Description | quote }},
		Attributes: (&{{ .PbPackageName }}.{{ .Block.Model.Message.GoIdent.GoName }}{}).ResourceSchema(),
	}
	if _proxy, ok := r.proxy.(rsrc.CanSchema); ok {
		ctx = r.setupContext(ctx)
		_proxy.Schema(ctx, req, resp)
	}
}

func (r *{{ .Block.GoName }}Resource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
{{- if .HasServiceClient }}
	// Get the gRPC client connection from the ProviderData
	if req.ProviderData == nil {
		resp.Diagnostics.AddError("Expected ProviderData to be not nil", "req.ProviderData is nil")
		return
	}
	conn, ok := req.ProviderData.(grpc.ClientConnInterface)
	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected ProviderData Type",
			fmt.Sprintf("Expected grpc.ClientConnInterface, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)
		return
	}
	// Create the service clients
	{{- range $name, $type := .Block.Members }}{{ if IsServiceClient $type }}
	r.{{ $name }} = {{ NewServiceClient $type }}(conn)
	{{- end }}{{- end }}
{{- end }}
	if _proxy, ok := r.proxy.(rsrc.CanConfigure); ok {
		ctx = r.setupContext(ctx)
		_proxy.Configure(ctx, req, resp)
		return
	}
}

func (r *{{ .Block.GoName }}Resource) ConfigValidators(ctx context.Context) []resource.ConfigValidator {
	if _proxy, ok := r.proxy.(rsrc.CanConfigValidators); ok {
		ctx = r.setupContext(ctx)
		return _proxy.ConfigValidators(ctx)
	}
	tflog.Warn(ctx, "ConfigValidators method not implemented.Make sure argument to New{{ .Block.GoName }}Resource() implements rsrc.CanConfigValidators interface")
	return nil
}

func (r *{{ .Block.GoName }}Resource) ValidateConfig(ctx context.Context, req resource.ValidateConfigRequest, resp *resource.ValidateConfigResponse) {
	if _proxy, ok := r.proxy.(rsrc.CanValidateConfig); ok {
		ctx = r.setupContext(ctx)
		_proxy.ValidateConfig(ctx, req, resp)
		return
	}
	tflog.Warn(ctx, "ValidateConfig method not implemented.Make sure argument to New{{ .Block.GoName }}Resource() implements rsrc.CanValidateConfig interface")
}

func (r *{{ .Block.GoName }}Resource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	if _proxy, ok := r.proxy.(rsrc.CanImportState); ok {
		ctx = r.setupContext(ctx)
		_proxy.ImportState(ctx, req, resp)
		return
	}
	tflog.Warn(ctx, "ImportState method not implemented.Make sure argument to New{{ .Block.GoName }}Resource() implements rsrc.CanImportState interface")
}

func (r *{{ .Block.GoName }}Resource) ModifyPlan(ctx context.Context, req resource.ModifyPlanRequest, resp *resource.ModifyPlanResponse) {
	if _proxy, ok := r.proxy.(rsrc.CanModifyPlan); ok {
		ctx = r.setupContext(ctx)
		_proxy.ModifyPlan(ctx, req, resp)
		return
	}
	tflog.Warn(ctx, "ModifyPlan method not implemented.Make sure argument to New{{ .Block.GoName }}Resource() implements rsrc.CanModifyPlan interface")
}

func (r *{{ .Block.GoName }}Resource) UpgradeState(ctx context.Context) map[int64]resource.StateUpgrader {
	if _proxy, ok := r.proxy.(rsrc.CanUpgradeState); ok {
		ctx = r.setupContext(ctx)
		return _proxy.UpgradeState(ctx)
	}
	tflog.Warn(ctx, "UpgradeState method not implemented.Make sure argument to New{{ .Block.GoName }}Resource() implements rsrc.CanUpgradeState interface")
	return nil
}

func (r *{{ .Block.GoName }}Resource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data {{ .PbPackageName }}.{{ .Block.Model.Message.GoIdent.GoName }}
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}
	ctx = r.setupContext(ctx)
	diagnostics := r.proxy.Read(ctx, req, resp, &data)
	resp.Diagnostics.Append(diagnostics...)
}

func (r *{{ .Block.GoName }}Resource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data {{ .PbPackageName }}.{{ .Block.Model.Message.GoIdent.GoName }}
	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}
	ctx = r.setupContext(ctx)
	diagnostics := r.proxy.Create(ctx, req, resp, &data)
	if diagnostics.HasError() {
		resp.Diagnostics.Append(diagnostics...)
		return
	}
	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *{{ .Block.GoName }}Resource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data {{ .PbPackageName }}.{{ .Block.Model.Message.GoIdent.GoName }}
	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}
	ctx = r.setupContext(ctx)
	diagnostics := r.proxy.Update(ctx, req, resp, &data)
	if diagnostics.HasError() {
		resp.Diagnostics.Append(diagnostics...)
		return
	}
	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *{{ .Block.GoName }}Resource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data {{ .PbPackageName }}.{{ .Block.Model.Message.GoIdent.GoName }}
	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)
	if resp.Diagnostics.HasError() {
		return
	}
	ctx = r.setupContext(ctx)
	diagnostics := r.proxy.Delete(ctx, req, resp, &data)
	resp.Diagnostics.Append(diagnostics...)
}

func (r *{{ .Block.GoName }}Resource) setupContext(ctx context.Context) context.Context {
	// Pass members via context
	{{- if .HasServiceClient }}
	// also passes the service clients
	{{- end }}
{{- range $name, $type := .Block.Members }}
	ctx = cntxt.WithValue(ctx, {{ $name | quote }}, r.{{ $name }})
{{- end }}
	return ctx
}


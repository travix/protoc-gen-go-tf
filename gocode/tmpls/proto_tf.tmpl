// Code generated by protoc-gen-gotf. DO NOT EDIT.
// versions:
//   protoc-gen-gotf {{ .Version }}

package {{ .PbPackageName }}

import (
{{ if .Imports }}
	{{ .Imports | join "\n\t" }}
{{ end }}
)

{{- range .Models -}}
// make sure the proto implements ObjectTypable
var _ attr.TypeWithAttributeTypes = &{{ .Message.GoIdent.GoName }}{}
{{- end }}
var _ = dschema.Schema{} // to avoid unused import error
var _ = pschema.Schema{} // to avoid unused import error
var _ = rschema.Schema{} // to avoid unused import error

{{ range .Models }}

{{ if .IsProvider -}}
func (x *{{ .Message.GoIdent.GoName }}) ProviderSchema() map[string]pschema.Attribute {
	attributes := map[string]pschema.Attribute{
{{- range .Attributes }}
	{{- if .TypeValue.IsList }}
		{{ .Name | quote }}: pschema.{{ .Schema.Name }}{
			ElementType: types.ObjectType{ AttrTypes: ({{ .TypeValue.NestedTypeValue }}).AttributeTypes() }
	{{- else if .TypeValue.IsMap }}
		{{ .Name | quote }}: pschema.{{ .Schema.Name }}{
			ElementType: types.ObjectType{ AttrTypes: ({{ .TypeValue.NestedTypeValue }}).AttributeTypes() },
	{{- else if .TypeValue.IsNestedSingleObject }}
		{{ .Name | quote }}: pschema.{{ .Schema.Name }}{
			ElementType: types.ObjectType{ AttrTypes: ({{ .TypeValue.NestedTypeValue }}).AttributeTypes() },
	{{- else }}
		{{ .Name | quote }}: pschema.{{ .Schema.Name }}{
	{{- end }}
			Optional: {{ .Optional }},
			Required: {{ .Required }},
			Sensitive: {{ .Sensitive }},
			Description: {{ .Description | quote }},
			MarkdownDescription: {{ .MdDescription | quote }},
			DeprecationMessage: {{ .Deprecation | quote }},
		},
{{- end }}
	}
	return attributes
}
{{- end }}

{{- if .IsDatasource }}
func (x *{{ .Message.GoIdent.GoName }}) DatasourceSchema() map[string]dschema.Attribute {
	attributes := map[string]dschema.Attribute{
{{- range .Attributes }}
	{{- if .TypeValue.IsList }}
		{{ .Name | quote }}: dschema.{{ .Schema.Name }}{
			ElementType: {{ .NestedType }},
	{{- else if .TypeValue.IsMap }}
		{{ .Name | quote }}: dschema.{{ .Schema.Name }}{
			ElementType: {{ .NestedType }},
	{{- else if .TypeValue.IsNestedSingleObject }}
		{{ .Name | quote }}: dschema.{{ .Schema.Name }}{
			ElementType: {{ .NestedType }},
	{{- else }}
		{{ .Name | quote }}: dschema.{{ .Schema.Name }}{
	{{- end }}
			Computed: {{ .Computed }},
			Optional: {{ .Optional }},
			Required: {{ .Required }},
			Sensitive: {{ .Sensitive }},
			Description: {{ .Description | quote }},
			MarkdownDescription: {{ .MdDescription | quote }},
			DeprecationMessage: {{ .Deprecation | quote }},
		},
{{- end }}
	}
	return attributes
}
{{- end }}

{{- if .IsResource }}
func (x *{{ .Message.GoIdent.GoName }}) ResourceSchema() map[string]rschema.Attribute {
	attributes := map[string]rschema.Attribute{
{{- range .Attributes }}
	{{- if .HasNestedType }}
		{{ .Name | quote }}: rschema.{{ .Schema.Name }}{
			ElementType: {{ .NestedType }},
	{{- else }}
		{{ .Name | quote }}: rschema.{{ .Schema.Name }}{
	{{- end }}
			Computed: {{ .Computed }},
			Optional: {{ .Optional }},
			Required: {{ .Required }},
			Sensitive: {{ .Sensitive }},
			Description: {{ .Description | quote }},
			MarkdownDescription: {{ .MdDescription | quote }},
			DeprecationMessage: {{ .Deprecation | quote }},
		},
{{- end }}
	}
	return attributes
}
{{- end }}

func (x *{{ .Message.GoIdent.GoName }}) AttributeDefaultValues(ctx context.Context) map[string]tftypes.Value {
	attributes := map[string]tftypes.Value{
{{- range .Attributes }}
	{{- if .NeedsDefaultValue }}
		{{ .Name | quote }}: {{ .DefaultValue }},
	{{- end }}
{{- end }}
	}
	return attributes
}

func (x *{{ .Message.GoIdent.GoName }}) AttributeTypes() map[string]attr.Type {
	attributes := map[string]attr.Type{
{{- range .Attributes }}
	{{- if .TypeValue.IsList }}
		{{ .Name | quote }}: types.ListType{
			ElemType: {{ .NestedType }},
		},
	{{- else if .TypeValue.IsMap }}
		{{ .Name | quote }}: types.MapType{
			ElemType: {{ .NestedType }},
		},
	{{- else if .TypeValue.IsNestedSingleObject }}
		{{ .Name | quote }}: types.ObjectType{
			ElemType: {{ .NestedType }},
		},
	{{- else }}
		{{ .Name | quote }}: types.{{ .TypeValue.Type.Name }},
	{{- end }}
{{- end }}
	}
	return attributes
}

func (x *{{ .Message.GoIdent.GoName }}) WithAttributeTypes(typs map[string]attr.Type) attr.TypeWithAttributeTypes {
	return basetypes.ObjectType{ AttrTypes: typs }.WithAttributeTypes(typs)
}

func (x *{{ .Message.GoIdent.GoName }}) TerraformType(ctx context.Context) tftypes.Type {
	return basetypes.ObjectType{ AttrTypes: x.AttributeTypes() }.TerraformType(ctx)
}

func (x *{{ .Message.GoIdent.GoName }}) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	return basetypes.ObjectType{ AttrTypes: x.AttributeTypes() }.ValueFromTerraform(ctx, in)
}

func (x *{{ .Message.GoIdent.GoName }}) Equal(candidate attr.Type) bool {
	return basetypes.ObjectType{ AttrTypes: x.AttributeTypes() }.Equal(candidate)
}

func (x *{{ .Message.GoIdent.GoName }}) ApplyTerraform5AttributePathStep(step tftypes.AttributePathStep) (interface{}, error) {
	return basetypes.ObjectType{ AttrTypes: x.AttributeTypes() }.ApplyTerraform5AttributePathStep(step)
}

func (x *{{ .Message.GoIdent.GoName }}) ValueType(ctx context.Context) attr.Value {
	return basetypes.ObjectType{AttrTypes: x.AttributeTypes()}.ValueType(ctx)
}

func (x *{{ .Message.GoIdent.GoName }}) ValueFromObject(ctx context.Context, obj basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	return basetypes.ObjectType{AttrTypes: x.AttributeTypes()}.ValueFromObject(ctx, obj)
}
{{- end }}

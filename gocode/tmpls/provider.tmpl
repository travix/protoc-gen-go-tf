{{template "header" .}}

// Ensure *{{ .Provider.GoName }}Provider fully satisfy terraform framework interfaces.
var _ provider.Provider = &{{ .Provider.GoName }}Provider{}

type {{ .Provider.GoName }}Exec interface {
	prvdr.Provider
{{- if .HasServiceClient }}
	prvdr.CanConfigureGrpc[*{{ .Provider.ModelGoName }}]
{{- end }}
}

type {{ .Provider.GoName }}Provider struct {
	version string
	exec {{ .Provider.ExecGoName }}
}

func New(version string, exec {{ .Provider.ExecGoName }}) func() provider.Provider {
	if exec == nil {
		panic("{{ .Provider.ExecGoName }} is required")
	}
	return func() provider.Provider {
		return &{{ .Provider.GoName }}Provider{
			version: version,
			exec: exec,
		}
	}
}

func (p *{{ .Provider.GoName }}Provider) Metadata(ctx context.Context, req provider.MetadataRequest, resp *provider.MetadataResponse) {
	resp.TypeName = {{ .Provider.TerraformName | quote }}
	resp.Version = p.version
	if _exec, ok := p.exec.(prvdr.CanMetadata); ok {
		_exec.Metadata(ctx, req, resp)
	}
}

func (p *{{ .Provider.GoName }}Provider) Schema(ctx context.Context, req provider.SchemaRequest, resp *provider.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: {{ .Provider.Description | quote }},
		Attributes: (&{{ .Provider.ModelGoName }}{}).ProviderSchema(),
	}
	if _exec, ok := p.exec.(prvdr.CanSchema); ok {
		_exec.Schema(ctx, req, resp)
	}
}

func (p *{{ .Provider.GoName }}Provider) Configure(ctx context.Context, req provider.ConfigureRequest, resp *provider.ConfigureResponse) {
	if _exec, ok := p.exec.(prvdr.CanConfigure); ok {
		_exec.Configure(ctx, req, resp)
{{- if .HasServiceClient }}
		if resp.DataSourceData != nil {
			resp.Diagnostics.AddWarning("resp.DataSourceData not set", "DataSourceData should be set to grpc.ClientConnInterface by Configure method found nil")
		}
		if resp.ResourceData != nil {
			resp.Diagnostics.AddWarning("resp.ResourceData not set", "ResourceData should be set to grpc.ClientConnInterface by Configure method found nil")
		}
{{- end }}
		return
	}
{{- if .HasServiceClient }}
	data, diagnostics := gotf.GetModel[{{ .Provider.ModelGoName }}](ctx, req.Config.Raw, req.Config.Get)
	if diagnostics.HasError() {
		resp.Diagnostics.Append(diagnostics...)
		return
	}
	conn, diagnostics := p.exec.ConfigureGrpc(ctx, data)
	if diagnostics.HasError() {
		resp.Diagnostics.Append(diagnostics...)
		return
	}
	resp.DataSourceData = conn
	resp.ResourceData = conn
	return
{{ else }}
	tflog.Warn(ctx, "CanConfigure method not implemented. Make sure argument to New() implements prvdr.CanConfigure interface")
{{- end }}
}

func (p *{{ .Provider.GoName }}Provider) ConfigValidators(ctx context.Context) []provider.ConfigValidator {
	if _exec, ok := p.exec.(prvdr.CanConfigValidators); ok {
		return _exec.ConfigValidators(ctx)
	}
	tflog.Warn(ctx, "ConfigValidators method not implemented. Make sure argument to New() implements prvdr.CanConfigValidators interface")
	return nil
}

func (p *{{ .Provider.GoName }}Provider) MetaSchema(ctx context.Context, req provider.MetaSchemaRequest,  resp*provider.MetaSchemaResponse) {
	if _exec, ok := p.exec.(prvdr.CanMetaSchema); ok {
		_exec.MetaSchema(ctx, req, resp)
		return
	}
	tflog.Warn(ctx, "MetaSchema method not implemented. Make sure argument to New() implements prvdr.CanMetaSchema interface")
}

func (p *{{ .Provider.GoName }}Provider) ValidateConfig(ctx context.Context, req provider.ValidateConfigRequest, resp *provider.ValidateConfigResponse) {
	if _exec, ok := p.exec.(prvdr.CanValidateConfig); ok {
		_exec.ValidateConfig(ctx, req, resp)
		return
	}
	tflog.Warn(ctx, "ValidateConfig method not implemented. Make sure argument to New() implements prvdr.CanValidateConfig interface")
}

func (p *{{ .Provider.GoName }}Provider) DataSources(ctx context.Context) []func() datasource.DataSource {
	return p.exec.DataSources(ctx)
}

func (p *{{ .Provider.GoName }}Provider) Resources(ctx context.Context) []func() resource.Resource {
	return p.exec.Resources(ctx)
}


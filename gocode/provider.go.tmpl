// Code generated by protoc-gen-terraform. DO NOT EDIT.
// versions:
// 	 protoc-gen-gotf {{ .Version }}
// 	 protoc          {{ .ProtocVersion }}
// source: {{ .Location }}

package {{ .ProviderPackageName }}

import (
{{ if .Imports }}
	{{ .Imports | join "\n\t" }}
{{ end }}
)

// Ensure *{{ .Provider.GoName }}Provider fully satisfy terraform framework interfaces.
var _ provider.Provider = &{{ .Provider.GoName }}Provider{}

type {{ .Provider.GoName }}Provider struct {
	version string
	proxy prvdr.Provider
{{- range $name, $type := .Provider.Members }}
	{{ $name }} {{ MemberType $type }}
{{- end }}
}

func New(version string, proxy prvdr.Provider) func() provider.Provider {
	if proxy == nil {
		panic("github.com/travix/gotf/prvdr.Provider is required")
	}
	return func() provider.Provider {
		return &{{ .Provider.GoName }}Provider{
			version: version,
			proxy: proxy,
		}
	}
}

func (p *{{ .Provider.GoName }}Provider) Metadata(ctx context.Context, req provider.MetadataRequest, resp *provider.MetadataResponse) {
	resp.TypeName = {{ .Provider.TfName | quote }}
	resp.Version = p.version
	if _proxy, ok := p.proxy.(prvdr.CanMetadata); ok {
		_proxy.Metadata(ctx, req, resp)
	}
}

func (p *{{ .Provider.GoName }}Provider) Schema(ctx context.Context, req provider.SchemaRequest, resp *provider.SchemaResponse) {
	resp.Schema = schema.Schema{
		Attributes: map[string]schema.Attribute{
{{- range .Model.Attributes }}
			{{ .Name | quote }}: rschema.{{ .Schema.Name }}{
				Required: {{ .Required }}
				Optional: {{ .Optional }}
				Sensitive: {{ .Sensitive }}
				Description: {{ .Description | quote }}
				MarkdownDescription: {{ .MdDescription | quote }}
				DeprecationMessage: {{ .Deprecation | quote }}
			},
{{- end }}
		},
	}
	if _proxy, ok := p.proxy.(prvdr.CanSchema); ok {
		_proxy.Schema(ctx, req, resp)
	}
}

func (p *{{ .Provider.GoName }}Provider) Configure(ctx context.Context, req provider.ConfigureRequest, resp *provider.ConfigureResponse) {
	var data {{ .PbPackageName }}.{{ .Provider.Model.Message.GoIdent.GoName }}
	_ = data
	if _proxy, ok := p.proxy.(prvdr.CanConfigure); ok {
		_proxy.Configure(ctx, req, resp)
{{- if .HasServiceClient }}
		if resp.DataSourceData != nil {
			resp.Diagnostics.AddWarning("resp.DataSourceData not set", "DataSourceData should be set to grpc.ClientConnInterface by Configure method found nil")
		}
		if resp.ResourceData != nil {
			resp.Diagnostics.AddWarning("resp.ResourceData not set", "ResourceData should be set to grpc.ClientConnInterface by Configure method found nil")
		}
{{- end }}
		return
	}
{{- if .HasServiceClient }}
	if _proxy, ok := p.proxy.(prvdr.CanConfigureGrpc); ok {
		resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)
		conn, diagnostics := _proxy.ConfigureGrpc(ctx, &data)
		if diagnostics.HasError() {
			resp.Diagnostics.Append(diagnostics...)
			return
		}
		resp.DataSourceData = conn
		resp.ResourceData = conn
		return
	}
	tflog.Warn(ctx, "ConfigureGrpc method not implemented. Make sure argument to New() implements prvdr.CanConfigureGrpc interface. prvdr.CanConfigure is not required")
{{ else }}
	tflog.Warn(ctx, "CanConfigure method not implemented. Make sure argument to New() implements prvdr.CanConfigure interface")
{{- end }}
}

func (p *{{ .Provider.GoName }}Provider) ConfigValidators(ctx context.Context) []provider.ConfigValidator {
	if _proxy, ok := p.proxy.(prvdr.CanConfigValidators); ok {
		return _proxy.ConfigValidators(ctx)
	}
	tflog.Warn(ctx, "ConfigValidators method not implemented. Make sure argument to New() implements prvdr.CanConfigValidators interface")
	return nil
}

func (p *{{ .Provider.GoName }}Provider) MetaSchema(ctx context.Context, req provider.MetaSchemaRequest,  resp*provider.MetaSchemaResponse) {
	if _proxy, ok := p.proxy.(prvdr.CanMetaSchema); ok {
		_proxy.MetaSchema(ctx, req, resp)
		return
	}
	tflog.Warn(ctx, "MetaSchema method not implemented. Make sure argument to New() implements prvdr.CanMetaSchema interface")
}

func (p *{{ .Provider.GoName }}Provider) ValidateConfig(ctx context.Context, req provider.ValidateConfigRequest, resp *provider.ValidateConfigResponse) {
	if _proxy, ok := p.proxy.(prvdr.CanValidateConfig); ok {
		_proxy.ValidateConfig(ctx, req, resp)
		return
	}
	tflog.Warn(ctx, "ValidateConfig method not implemented. Make sure argument to New() implements prvdr.CanValidateConfig interface")
}

func (p *{{ .Provider.GoName }}Provider) DataSources(ctx context.Context) []func() datasource.DataSource {
	return p.proxy.DataSources(ctx)
}

func (p *{{ .Provider.GoName }}Provider) Resources(ctx context.Context) []func() resource.Resource {
	return p.proxy.Resources(ctx)
}


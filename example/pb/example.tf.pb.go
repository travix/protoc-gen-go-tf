// Code generated by protoc-gen-gotf. DO NOT EDIT.
// versions:
//   protoc-gen-gotf local
//   protoc          local
// source: local

package pb

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	dschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	rschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
)

// make sure the proto implements ObjectTypable
var _ attr.TypeWithAttributeTypes = &User{}

// make sure the proto implements ObjectTypable
var _ attr.TypeWithAttributeTypes = &Users{}

// make sure the proto implements ObjectTypable
var _ attr.TypeWithAttributeTypes = &Group{}

// make sure the proto implements ObjectTypable
var _ attr.TypeWithAttributeTypes = &Groups{}

func (x *User) DatasourceSchema() map[string]dschema.Attribute {
	attributes := map[string]dschema.Attribute{
		"username": dschema.StringAttribute{
			Required:            true,
			Optional:            false,
			Sensitive:           false,
			Description:         "",
			MarkdownDescription: "",
			DeprecationMessage:  "",
		},
		"email": dschema.StringAttribute{
			Required:            false,
			Optional:            true,
			Sensitive:           false,
			Description:         "user email address",
			MarkdownDescription: "user email address",
			DeprecationMessage:  "user email address",
		},
	}
	return attributes
}

func (x *User) ResourceSchema() map[string]rschema.Attribute {
	attributes := map[string]rschema.Attribute{
		"username": rschema.StringAttribute{
			Required:            true,
			Optional:            false,
			Sensitive:           false,
			Description:         "",
			MarkdownDescription: "",
			DeprecationMessage:  "",
		},
		"email": rschema.StringAttribute{
			Required:            false,
			Optional:            true,
			Sensitive:           false,
			Description:         "user email address",
			MarkdownDescription: "user email address",
			DeprecationMessage:  "user email address",
		},
	}
	return attributes
}

func (x *User) AttributeTypes() map[string]attr.Type {
	attributes := map[string]attr.Type{
		"username": types.StringType,
		"email":    types.StringType,
	}
	return attributes
}

func (x *User) WithAttributeTypes(typs map[string]attr.Type) attr.TypeWithAttributeTypes {
	return basetypes.ObjectType{AttrTypes: typs}.WithAttributeTypes(typs)
}

func (x *User) TerraformType(ctx context.Context) tftypes.Type {
	return basetypes.ObjectType{AttrTypes: x.AttributeTypes()}.TerraformType(ctx)
}

func (x *User) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	return basetypes.ObjectType{AttrTypes: x.AttributeTypes()}.ValueFromTerraform(ctx, in)
}

func (x *User) Equal(candidate attr.Type) bool {
	return basetypes.ObjectType{AttrTypes: x.AttributeTypes()}.Equal(candidate)
}

func (x *User) ApplyTerraform5AttributePathStep(step tftypes.AttributePathStep) (interface{}, error) {
	return basetypes.ObjectType{AttrTypes: x.AttributeTypes()}.ApplyTerraform5AttributePathStep(step)
}

func (x *User) ValueType(ctx context.Context) attr.Value {
	return basetypes.ObjectType{AttrTypes: x.AttributeTypes()}.ValueType(ctx)
}

func (x *User) ValueFromObject(ctx context.Context, obj basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	return basetypes.ObjectType{AttrTypes: x.AttributeTypes()}.ValueFromObject(ctx, obj)
}

func (x *Users) DatasourceSchema() map[string]dschema.Attribute {
	attributes := map[string]dschema.Attribute{
		"users": dschema.ListAttribute{
			ElementType:         &User{},
			Required:            false,
			Optional:            false,
			Sensitive:           false,
			Description:         "",
			MarkdownDescription: "",
			DeprecationMessage:  "",
		},
	}
	return attributes
}

func (x *Users) ResourceSchema() map[string]rschema.Attribute {
	attributes := map[string]rschema.Attribute{
		"users": rschema.ListAttribute{
			ElementType:         &User{},
			Required:            false,
			Optional:            false,
			Sensitive:           false,
			Description:         "",
			MarkdownDescription: "",
			DeprecationMessage:  "",
		},
	}
	return attributes
}

func (x *Users) AttributeTypes() map[string]attr.Type {
	attributes := map[string]attr.Type{
		"users": types.ListType{
			ElemType: &User{},
		},
	}
	return attributes
}

func (x *Users) WithAttributeTypes(typs map[string]attr.Type) attr.TypeWithAttributeTypes {
	return basetypes.ObjectType{AttrTypes: typs}.WithAttributeTypes(typs)
}

func (x *Users) TerraformType(ctx context.Context) tftypes.Type {
	return basetypes.ObjectType{AttrTypes: x.AttributeTypes()}.TerraformType(ctx)
}

func (x *Users) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	return basetypes.ObjectType{AttrTypes: x.AttributeTypes()}.ValueFromTerraform(ctx, in)
}

func (x *Users) Equal(candidate attr.Type) bool {
	return basetypes.ObjectType{AttrTypes: x.AttributeTypes()}.Equal(candidate)
}

func (x *Users) ApplyTerraform5AttributePathStep(step tftypes.AttributePathStep) (interface{}, error) {
	return basetypes.ObjectType{AttrTypes: x.AttributeTypes()}.ApplyTerraform5AttributePathStep(step)
}

func (x *Users) ValueType(ctx context.Context) attr.Value {
	return basetypes.ObjectType{AttrTypes: x.AttributeTypes()}.ValueType(ctx)
}

func (x *Users) ValueFromObject(ctx context.Context, obj basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	return basetypes.ObjectType{AttrTypes: x.AttributeTypes()}.ValueFromObject(ctx, obj)
}

func (x *Group) DatasourceSchema() map[string]dschema.Attribute {
	attributes := map[string]dschema.Attribute{
		"name": dschema.StringAttribute{
			Required:            true,
			Optional:            false,
			Sensitive:           false,
			Description:         "",
			MarkdownDescription: "",
			DeprecationMessage:  "",
		},
		"email": dschema.StringAttribute{
			Required:            false,
			Optional:            true,
			Sensitive:           false,
			Description:         "group email address",
			MarkdownDescription: "group email address",
			DeprecationMessage:  "group email address",
		},
		"users": dschema.ListAttribute{
			ElementType:         &User{},
			Required:            false,
			Optional:            true,
			Sensitive:           false,
			Description:         "",
			MarkdownDescription: "",
			DeprecationMessage:  "",
		},
	}
	return attributes
}

func (x *Group) ResourceSchema() map[string]rschema.Attribute {
	attributes := map[string]rschema.Attribute{
		"name": rschema.StringAttribute{
			Required:            true,
			Optional:            false,
			Sensitive:           false,
			Description:         "",
			MarkdownDescription: "",
			DeprecationMessage:  "",
		},
		"email": rschema.StringAttribute{
			Required:            false,
			Optional:            true,
			Sensitive:           false,
			Description:         "group email address",
			MarkdownDescription: "group email address",
			DeprecationMessage:  "group email address",
		},
		"users": rschema.ListAttribute{
			ElementType:         &User{},
			Required:            false,
			Optional:            true,
			Sensitive:           false,
			Description:         "",
			MarkdownDescription: "",
			DeprecationMessage:  "",
		},
	}
	return attributes
}

func (x *Group) AttributeTypes() map[string]attr.Type {
	attributes := map[string]attr.Type{
		"name":  types.StringType,
		"email": types.StringType,
		"users": types.ListType{
			ElemType: &User{},
		},
	}
	return attributes
}

func (x *Group) WithAttributeTypes(typs map[string]attr.Type) attr.TypeWithAttributeTypes {
	return basetypes.ObjectType{AttrTypes: typs}.WithAttributeTypes(typs)
}

func (x *Group) TerraformType(ctx context.Context) tftypes.Type {
	return basetypes.ObjectType{AttrTypes: x.AttributeTypes()}.TerraformType(ctx)
}

func (x *Group) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	return basetypes.ObjectType{AttrTypes: x.AttributeTypes()}.ValueFromTerraform(ctx, in)
}

func (x *Group) Equal(candidate attr.Type) bool {
	return basetypes.ObjectType{AttrTypes: x.AttributeTypes()}.Equal(candidate)
}

func (x *Group) ApplyTerraform5AttributePathStep(step tftypes.AttributePathStep) (interface{}, error) {
	return basetypes.ObjectType{AttrTypes: x.AttributeTypes()}.ApplyTerraform5AttributePathStep(step)
}

func (x *Group) ValueType(ctx context.Context) attr.Value {
	return basetypes.ObjectType{AttrTypes: x.AttributeTypes()}.ValueType(ctx)
}

func (x *Group) ValueFromObject(ctx context.Context, obj basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	return basetypes.ObjectType{AttrTypes: x.AttributeTypes()}.ValueFromObject(ctx, obj)
}

func (x *Groups) DatasourceSchema() map[string]dschema.Attribute {
	attributes := map[string]dschema.Attribute{
		"groups": dschema.ListAttribute{
			ElementType:         &Group{},
			Required:            false,
			Optional:            false,
			Sensitive:           false,
			Description:         "",
			MarkdownDescription: "",
			DeprecationMessage:  "",
		},
	}
	return attributes
}

func (x *Groups) ResourceSchema() map[string]rschema.Attribute {
	attributes := map[string]rschema.Attribute{
		"groups": rschema.ListAttribute{
			ElementType:         &Group{},
			Required:            false,
			Optional:            false,
			Sensitive:           false,
			Description:         "",
			MarkdownDescription: "",
			DeprecationMessage:  "",
		},
	}
	return attributes
}

func (x *Groups) AttributeTypes() map[string]attr.Type {
	attributes := map[string]attr.Type{
		"groups": types.ListType{
			ElemType: &Group{},
		},
	}
	return attributes
}

func (x *Groups) WithAttributeTypes(typs map[string]attr.Type) attr.TypeWithAttributeTypes {
	return basetypes.ObjectType{AttrTypes: typs}.WithAttributeTypes(typs)
}

func (x *Groups) TerraformType(ctx context.Context) tftypes.Type {
	return basetypes.ObjectType{AttrTypes: x.AttributeTypes()}.TerraformType(ctx)
}

func (x *Groups) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	return basetypes.ObjectType{AttrTypes: x.AttributeTypes()}.ValueFromTerraform(ctx, in)
}

func (x *Groups) Equal(candidate attr.Type) bool {
	return basetypes.ObjectType{AttrTypes: x.AttributeTypes()}.Equal(candidate)
}

func (x *Groups) ApplyTerraform5AttributePathStep(step tftypes.AttributePathStep) (interface{}, error) {
	return basetypes.ObjectType{AttrTypes: x.AttributeTypes()}.ApplyTerraform5AttributePathStep(step)
}

func (x *Groups) ValueType(ctx context.Context) attr.Value {
	return basetypes.ObjectType{AttrTypes: x.AttributeTypes()}.ValueType(ctx)
}

func (x *Groups) ValueFromObject(ctx context.Context, obj basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	return basetypes.ObjectType{AttrTypes: x.AttributeTypes()}.ValueFromObject(ctx, obj)
}

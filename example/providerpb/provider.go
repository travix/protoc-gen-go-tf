// Code generated by protoc-gen-terraform. DO NOT EDIT.
// versions:
// 	 protoc-gen-gotf local
// 	 protoc          local
// source: local

package providerpb

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/provider"
	"github.com/hashicorp/terraform-plugin-framework/provider/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/travix/gotf/prvdr"

	pb "github.com/travix/protoc-gen-gotf/example/pb"
)

// Ensure *ExampleProvider fully satisfy terraform framework interfaces.
var _ provider.Provider = &ExampleProvider{}

type ExampleProvider struct {
	version string
	proxy   prvdr.Provider
}

func New(version string, proxy prvdr.Provider) func() provider.Provider {
	if proxy == nil {
		panic("github.com/travix/gotf/prvdr.Provider is required")
	}
	return func() provider.Provider {
		return &ExampleProvider{
			version: version,
			proxy:   proxy,
		}
	}
}

func (p *ExampleProvider) Metadata(ctx context.Context, req provider.MetadataRequest, resp *provider.MetadataResponse) {
	resp.TypeName = "example"
	resp.Version = p.version
	if _proxy, ok := p.proxy.(prvdr.CanMetadata); ok {
		_proxy.Metadata(ctx, req, resp)
	}
}

func (p *ExampleProvider) Schema(ctx context.Context, req provider.SchemaRequest, resp *provider.SchemaResponse) {
	resp.Schema = schema.Schema{
		Attributes: map[string]schema.Attribute{},
	}
	if _proxy, ok := p.proxy.(prvdr.CanSchema); ok {
		_proxy.Schema(ctx, req, resp)
	}
}

func (p *ExampleProvider) Configure(ctx context.Context, req provider.ConfigureRequest, resp *provider.ConfigureResponse) {
	var data pb.ProviderModel
	_ = data
	if _proxy, ok := p.proxy.(prvdr.CanConfigure); ok {
		_proxy.Configure(ctx, req, resp)
		if resp.DataSourceData != nil {
			resp.Diagnostics.AddWarning("resp.DataSourceData not set", "DataSourceData should be set to grpc.ClientConnInterface by Configure method found nil")
		}
		if resp.ResourceData != nil {
			resp.Diagnostics.AddWarning("resp.ResourceData not set", "ResourceData should be set to grpc.ClientConnInterface by Configure method found nil")
		}
		return
	}
	if _proxy, ok := p.proxy.(prvdr.CanConfigureGrpc); ok {
		resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)
		conn, diagnostics := _proxy.ConfigureGrpc(ctx, &data)
		if diagnostics.HasError() {
			resp.Diagnostics.Append(diagnostics...)
			return
		}
		resp.DataSourceData = conn
		resp.ResourceData = conn
		return
	}
	tflog.Warn(ctx, "ConfigureGrpc method not implemented. Make sure argument to New() implements prvdr.CanConfigureGrpc interface. prvdr.CanConfigure is not required")

}

func (p *ExampleProvider) ConfigValidators(ctx context.Context) []provider.ConfigValidator {
	if _proxy, ok := p.proxy.(prvdr.CanConfigValidators); ok {
		return _proxy.ConfigValidators(ctx)
	}
	tflog.Warn(ctx, "ConfigValidators method not implemented. Make sure argument to New() implements prvdr.CanConfigValidators interface")
	return nil
}

func (p *ExampleProvider) MetaSchema(ctx context.Context, req provider.MetaSchemaRequest, resp *provider.MetaSchemaResponse) {
	if _proxy, ok := p.proxy.(prvdr.CanMetaSchema); ok {
		_proxy.MetaSchema(ctx, req, resp)
		return
	}
	tflog.Warn(ctx, "MetaSchema method not implemented. Make sure argument to New() implements prvdr.CanMetaSchema interface")
}

func (p *ExampleProvider) ValidateConfig(ctx context.Context, req provider.ValidateConfigRequest, resp *provider.ValidateConfigResponse) {
	if _proxy, ok := p.proxy.(prvdr.CanValidateConfig); ok {
		_proxy.ValidateConfig(ctx, req, resp)
		return
	}
	tflog.Warn(ctx, "ValidateConfig method not implemented. Make sure argument to New() implements prvdr.CanValidateConfig interface")
}

func (p *ExampleProvider) DataSources(ctx context.Context) []func() datasource.DataSource {
	return p.proxy.DataSources(ctx)
}

func (p *ExampleProvider) Resources(ctx context.Context) []func() resource.Resource {
	return p.proxy.Resources(ctx)
}

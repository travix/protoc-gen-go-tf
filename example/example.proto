syntax = "proto3";

package example;

option go_package = "github.com/travix/protoc-gen-gotf/example/pb";

import "gotf.proto";

message ProviderModel {
  option (gotf.provider) = {
    name: "example"
    pb_package: "github.com/travix/protoc-gen-gotf/example/pb"
  };
  string endpoint = 1 [(gotf.attribute) = { must_be: Required }];
}

// terraform resource
message User {
  option (gotf.resource) = {members: [{key: "client", value: {go_identity: {name: "UserServiceClient"}}}]};
  string username = 1 [(gotf.attribute) = { must_be: Required }];
  string email = 2 [(gotf.attribute) = { must_be: Optional }]; // user email address
}

// terraform datasource
message Users {
  option (gotf.datasource) = {members: [{key: "client", value: {go_identity: {name: "UserServiceClient"}}}]};
  repeated User users = 1;
}

// terraform resource
message Group {
  option (gotf.resource) = {explicit_fields: true, members: [{key: "client", value: {go_identity: {name: "GroupServiceClient"}}}]};
  string name = 1 [(gotf.attribute) = { must_be: Required }];
  string email = 2 [(gotf.attribute) = { must_be: Optional }]; // group email address
  User maintainer = 3; // this will be skipped in provider
  repeated User users = 4 [(gotf.attribute) = { must_be: Optional }];
}

// terraform datasource
message Groups {
  option (gotf.datasource) = {members: [{key: "client", value: {go_identity: {name: "GroupServiceClient"}}}]};
  repeated Group groups = 1;
}

message GetUserRequest {
  string username = 1;
}

message GetGroupRequest {
  string name = 1;
}

message Empty {
}

service UserService {
  rpc GetUser(GetUserRequest) returns (User);
  rpc CreateUser(User) returns (User);
  rpc ListUsers(Empty) returns (Users);
}

service GroupService {
  rpc GetGroup(GetGroupRequest) returns (Group);
  rpc CreateGroup(Group) returns (Group);
  rpc ListGroups(Empty) returns (Groups);
}
